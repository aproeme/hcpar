#ifndef HC_CELL_H
#define HC_CELL_H

// forward declarations to resolve circular include dependency
class CatchmentParameters;
class Cell;
class Typemaps;

#include <libgeodecomp/misc/apitraits.h>
#include <libgeodecomp/storage/gridbase.h>
#include <typemaps.h> // autogenerated from below Cell class definition by "make typemaps"

#define here neighborhood[LibGeoDecomp::FixedCoord<  0,  0 >()]
#define west neighborhood[LibGeoDecomp::FixedCoord< -1,  0 >()]
#define east neighborhood[LibGeoDecomp::FixedCoord<  1,  0 >()]
#define north neighborhood[LibGeoDecomp::FixedCoord< 0,  1 >()]
#define south neighborhood[LibGeoDecomp::FixedCoord< 0, -1 >()]


class Cell
{    
public:
    friend class Typemaps;

    class API :
	public LibGeoDecomp::APITraits::HasFixedCoordsOnlyUpdate,
	public LibGeoDecomp::APITraits::HasStencil<LibGeoDecomp::Stencils::VonNeumann<2,1> >,
	public LibGeoDecomp::APITraits::HasCubeTopology<2>,
	public LibGeoDecomp::APITraits::HasAutoGeneratedMPIDataType<Typemaps>,
	public LibGeoDecomp::APITraits::HasNanoSteps<4>
    {};
//public LibGeoDecomp::APITraits::HasSoA,
//
	    
    enum CellType : int {
	INTERNAL=0,
	EDGE_WEST=1,
	EDGE_NORTH=2,
	EDGE_EAST=3,
	EDGE_SOUTH=4, 
	CORNER_NW=5,
	CORNER_NE=6,
	CORNER_SE=7,
	CORNER_SW=8,
	NODATA=9,
    };
    
    //+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
    // Grid quantities (each cell has its own copy)
    //+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
    CellType celltype = CellType::INTERNAL;
    double celltype_double = 0.0;
    double elevation = 0.0;
    double waterDepth = 0.0;
    double waterLevel = 0.0;
    double qX = 0.0;
    double qY = 0.0;
    double hflowX = 0.0;
    double hflowY = 0.0;
    double rainRate = 0.0;
    
    //+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
    // static parameters (each MPI rank has its own copy)
    //+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
    static double timestep;
    static double DX;
    static double DY;
    static double no_data_value;
    static double edgeslope;
    static double hflowThreshold;
    static double courantNumber;
    static double mannings;
    static double froudeLimit;
    static double waterDepthErosionThreshold;
    static bool rain_in_high_places;
    static double rain_above_elevation;
    static double waterOut;
    static const double gravity;
    
    Cell()
	{}
        
    // Defined in cell.cpp
    static void grid(LibGeoDecomp::GridBase<Cell, 2> *localGrid, const LibGeoDecomp::Coord<2> globalDimensions, const CatchmentParameters& parameters);

    // Defined in update.tpp
    template<typename COORD_MAP> inline void update(const COORD_MAP& neighborhood, unsigned nanoStep);

    // Hydrology (defined in hydrology.tpp)
    template<typename COORD_MAP> inline void catchmentWaterInputs(const COORD_MAP& neighborhood);
    template<typename COORD_MAP> inline void flowRoute(const COORD_MAP& neighborhood);
    template<typename COORD_MAP> inline void flowRouteX(const COORD_MAP& neighborhood);
    template<typename COORD_MAP> inline void flowRouteY(const COORD_MAP& neighborhood);
    template<typename COORD_MAP> inline void updateQx(const COORD_MAP& neighborhood, double hflowX, double tempslope, double flow_timestep);
    template<typename COORD_MAP> inline void updateQy(const COORD_MAP& neighborhood, double hflowY, double tempslope, double flow_timestep);
    inline void updateQ(const double &q, double &q_new, double hflow, double tempslope, double flow_timestep);
    inline void froudeCheck(double &q, double hflow);
    template<typename COORD_MAP> inline void dischargeCheck(const COORD_MAP& neighborhood, double &q, double neighbour_waterDepth, double Delta);
    template<typename COORD_MAP> inline void depthUpdate(const COORD_MAP& neighborhood);
    template<typename COORD_MAP> inline void updateWaterDepth(const COORD_MAP& neighborhood, double east_qX, double south_qY, double flow_timestep);
    inline double getFlowTimestep();
    inline double CFLCondition();
    template<typename COORD_MAP> inline void waterFluxOut(const COORD_MAP& neighborhood);
    static inline double numericalRainRate(const double physicalRainRate);
};




#include <update.tpp>
#endif

